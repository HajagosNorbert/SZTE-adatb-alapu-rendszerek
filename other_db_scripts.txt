-- 1. Legújabb hirdetmény kurzuson belül

select tartalom from hirdetmeny where megiras_ideje in (select MAX(megiras_ideje) from hirdetmeny);

select tartalom, megiras_ideje, felhasznalo.keresztnev, felhasznalo.vezeteknev from hirdetmeny 
inner join felhasznalo on felhasznalo.kod = hirdetmeny.felhasznalo_kod
where megiras_ideje in (select MAX(megiras_ideje) from hirdetmeny where hirdetmeny.kurzus_kod = :courseId)
and hirdetmeny.kurzus_kod = :courseId;


-- 2. Legújabb fórum bejegyzés kurzuson belül

select tartalom, megiras_ideje, felhasznalo.keresztnev, felhasznalo.vezeteknev from bejegyzes 
inner join felhasznalo on felhasznalo.kod = bejegyzes.felhasznalo_kod
where megiras_ideje in (select MAX(megiras_ideje) from bejegyzes where bejegyzes.kurzus_kod = :courseId)
and bejegyzes.kurzus_kod = :courseId;


-- 3. Legújabb dokumentum adott kurzuson belül

select * from (
select tananyag.nev as tananyag_nev, KURZUS.NEV as kurzus_nev from kurzus
left JOIN tananyag on kurzus.kod = tananyag.kurzus_kod
 where feltoltes_datum in (select MAX(feltoltes_datum) from tananyag where kurzus_kod = :courseId)
 and kurzus.kod = :courseId
) where ROWNUM <= 1;

-- 4. Legfrissebb bejelentkezés személye

select log.kod as log_kod, felhasznalo.kod as felhasznalo_kod, jelszo, keresztnev, vezeteknev, admin, szemeszter, hallgato.felhasznalo_kod as hallgato_kod, TO_CHAR(tanitas_kezdete, 'YYYY-MM-DD HH24:MI') as tanitas_kezdete, oktato.felhasznalo_kod as oktato_kod
from log
inner join felhasznalo on log.felhasznalo_kod = felhasznalo.kod
left join hallgato on  hallgato.felhasznalo_kod = log.felhasznalo_kod 
left join oktato on oktato.felhasznalo_kod = log.felhasznalo_kod
where bejelentkezesi_ido in (select MAX(bejelentkezesi_ido) from log);


-- 5. Az egyes kurzusból, hány vizsgaalkalom van meghirdetve

select kurzus.kod, kurzus.nev, count(vizsga.kurzus_kod) as vizsga_count
from kurzus 
left join vizsga on vizsga.kurzus_kod = kurzus.kod
where kurzus.kod = :courseId
group by kurzus.kod, kurzus.nev;


-- 6. Kiválasztja azon kurzusadatokat, oktatójának adatait és a kurzus jelenlegi létszámát, melyeknek a felhasználó oktatója, vagy fel van rá íratkozva, mint hallgató.

select kurzus.kod, kurzus.nev, kurzus.max_letszam, count(felhasznalo.kod) AS letszam, f2.kod as oktato_kod, f2.keresztnev as oktato_keresztnev, f2.vezeteknev as oktato_vezeteknev, kurzus.terem_kod as terem_kod, epulet.nev as epulet_nev
        from kurzus
        left join feliratkozas on kurzus.kod = feliratkozas.kurzus_kod 
        left join felhasznalo on feliratkozas.hallgato_kod = felhasznalo.kod
        left join felhasznalo f2 on kurzus.oktato_kod = f2.kod
        inner JOIN terem on kurzus.terem_kod = terem.kod  AND kurzus.epulet_kod = terem.epulet_kod
        inner JOIN epulet on epulet.kod = terem.epulet_kod
        where kurzus.oktato_kod = :userId or kurzus.kod in (
        SELECT kurzus.kod FROM kurzus INNER JOIN feliratkozas ON kurzus.kod = feliratkozas.kurzus_kod 
                 INNER JOIN hallgato on feliratkozas.hallgato_kod = hallgato.felhasznalo_kod
                 INNER JOIN felhasznalo on hallgato.felhasznalo_kod = felhasznalo.kod
                 WHERE felhasznalo.kod = :userId
        )
        group by kurzus.kod, kurzus.nev,kurzus.max_letszam, f2.kod, f2.keresztnev, f2.vezeteknev,  kurzus.terem_kod , epulet.nev;

--7. Kiválasztja a kurzusok, oktatójának adatait és a kurzus jelenlegi létszámát

select kurzus.kod, kurzus.nev, kurzus.max_letszam, f2.kod as oktato_kod, f2.keresztnev as oktato_keresztnev, f2.vezeteknev as oktato_vezeteknev, kurzus.terem_kod as terem_kod, epulet.nev as epulet_nev, count(felhasznalo.kod) AS letszam
        from kurzus 
        left join feliratkozas on kurzus.kod = feliratkozas.kurzus_kod 
        left join felhasznalo on feliratkozas.hallgato_kod = felhasznalo.kod
        left join felhasznalo f2 on kurzus.oktato_kod = f2.kod
        inner JOIN terem on kurzus.terem_kod = terem.kod AND kurzus.epulet_kod = terem.epulet_kod
        inner JOIN epulet on epulet.kod = terem.epulet_kod
        group by kurzus.kod, kurzus.nev,kurzus.max_letszam, f2.kod, f2.keresztnev, f2.vezeteknev, kurzus.terem_kod , epulet.nev;

-- 8. Listázza az épületeket és hogy hány terem van az adott épülethez adva

select  epulet.kod AS "epulet_id",epulet.nev,count(terem.kod) AS "darab"
                from epulet left join terem on epulet.kod = terem.epulet_kod
                group by epulet.kod,epulet.nev;




create or replace trigger felhasznalo_torles
before delete on felhasznalo
for each row 
begin
    delete from hallgato where FELHASZNALO_KOD = :old.kod;
    delete from oktato where FELHASZNALO_KOD = :old.kod;
end;
/

-- Kurzus törléshez trigger

create or replace trigger delete_courses
before delete on kurzus
for each row
begin

    delete from bejegyzes where kod = :OLD.kod;
    delete from feliratkozas where kurzus_kod = :OLD.kod;
    delete from hirdetmeny where kurzus_kod = :OLD.kod;
    delete from tananyag where kurzus_kod = :OLD.kod;
    delete from vizsga where kurzus_kod = :OLD.kod;

end;
/

create or replace trigger hallgato_torles
before delete on hallgato
for each row 
begin
    delete from feliratkozas where HALLGATO_KOD = :old.FELHASZNALO_KOD;
end;
/

create or replace trigger oktato_torles
before delete on oktato
for each row 
begin
    update kurzus set oktato_kod = NULL where oktato_kod = :old.FELHASZNALO_KOD;
end;
/

create or replace trigger terem_torles
before delete on terem
for each row 
begin
    delete from kurzus where kurzus.terem_kod = :old.kod and kurzus.epulet_kod = :old.epulet_kod;
    delete from vizsga where vizsga.terem_kod = :old.kod and vizsga.epulet_kod = :old.epulet_kod;
end;
/



-- 1. terem update

create or replace procedure updateTerem (ujTeremNev in varchar2, ujTeremKod in number, regiTeremKod in number, regiEpuletKod in number, ujEpuletKod in number) as
v_termek number;
begin
    select count(terem.kod) into v_termek from terem where terem.epulet_kod = updateTerem.ujEpuletKod AND terem.kod = updateTerem.ujTeremKod;
    update terem set terem.nev = ujTeremNev where terem.kod = regiTeremKod and terem.epulet_kod = regiEpuletKod;
    if (v_termek = 0) then
        INSERT INTO terem (kod, nev, epulet_kod) values (ujTeremKod, ujTeremNev, ujEpuletKod);
        update kurzus set kurzus.terem_kod = ujTeremKod, kurzus.epulet_kod = ujEpuletKod where kurzus.terem_kod = regiTeremKod and kurzus.epulet_kod = regiEpuletKod;
        update vizsga set vizsga.terem_kod = ujTeremKod, vizsga.epulet_kod = ujEpuletKod where vizsga.terem_kod = regiTeremKod and vizsga.epulet_kod = regiEpuletKod;
        
        delete from terem where terem.kod = regiTeremKod and terem.epulet_kod = regiEpuletKod;
    end if;
end;


-- 2. új épület

create or replace procedure createBuilding(name in varchar2) as
begin

    insert into epulet (nev) values(createBuilding.name);

end;

-- 3. új terem

create or replace procedure createRoom(nev in varchar2, kod in number, epuletKod in number)as
begin


    insert into terem values(createRoom.kod,createRoom.nev,createRoom.epuletKod);

end;

-- 4. épület törlés

create or replace procedure deleteBuilding(buildingId in number) as
begin

    delete from terem where epulet_kod = deleteBuilding.buildingId;
    delete from epulet where kod = deleteBuilding.buildingId;

end;